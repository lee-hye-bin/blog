import React, {useState} from 'react'

const CommentSection = () => {
  /* 
    useState
    ÎåìÍ∏Ä Î∞∞Ïó¥
    ÏÉà ÎåìÍ∏Ä ÌÖçÏä§Ìä∏
    ÎåìÍ∏Ä Î≥¥Ïù¥Í∏∞, Ïà®Í∏∞Í∏∞
    ÏàòÏ†ï ÎåìÍ∏Ä Ïù∏Îç±Ïä§
    ÏàòÏ†ïÎêú ÎåìÍ∏Ä ÌÖçÏä§Ìä∏
  */
  const [comments, setComments] = useState([]);
  const [newComment, setNewComment] = useState('');
  const [showComment, setShowComment] = useState(false);
  const [editIndex, setEditIndex] = useState(null);
  const [editText, setEditText] = useState('');
  const [like, setLike] = useState(0);

  /* 
    Ìï®Ïàò
    ÎåìÍ∏Ä Ï∂îÍ∞Ä, Î≥¥Ïù¥Í∏∞, Ïà®Í∏∞Í∏∞, ÎåìÍ∏Ä ÏàòÏ†ï, ÏàòÏ†ïÎêú ÎåìÍ∏Ä Ï†ÄÏû•, ÏÇ≠Ï†ú
  */

  /* handle */
  //ÎåìÍ∏Ä Ï∂îÍ∞Ä
  const handdleAddComments = () => {
    //ÎåìÍ∏Ä Ï∂îÍ∞Ä
    if(newComment.trim()){ //ÎåìÍ∏ÄÏù¥ ÎπÑÏñ¥ÏûàÏßÄ ÏïäÏúºÎ©¥
      setComments([...comments, {text: newComment, id:Date.now()}]); //ÎåìÍ∏Ä Ï∂îÍ∞Ä
      setNewComment(""); //ÏÉà ÎåìÍ∏ÄÎ°ú ÌÖçÏä§Ìä∏ Ï¥àÍ∏∞Ìôî
    }
  };
  const ToggleComments = () => {
    //ÎåìÍ∏Ä Î≥¥Ïù¥Í∏∞ Ïà®Í∏∞Í∏∞
    setShowComment(!showComment);
  };
  const handdleEditComments = (index) => {
    //ÎåìÍ∏Ä ÏàòÏ†ï
    setEditIndex(index); //ÏàòÏ†ïÌï† ÎåìÍ∏Ä Ïù∏Îç±Ïä§Î•º Ï†ÄÏû•
    setEditText(comments[index].text);
  };
  const handdleSaveEdit = () => {
    //ÏàòÏ†ïÎêú ÎåìÍ∏Ä Ï†ÄÏû•
    if(editText.trim()){ //ÌÖçÏä§Ìä∏Í∞Ä ÎπÑÏñ¥ÏûàÏßÄ ÏïäÏúºÎ©¥
      setComments((prevComments)=>{
        const updatedComments = [...prevComments];
        updatedComments[editIndex].text = editIndex;
        return updatedComments
      }); //ÏàòÏ†ïÎêú ÎåìÍ∏Ä Î∞∞Ïó¥Î°ú Ï†ÄÏû•
      setEditIndex(null); //index Ï¥àÍ∏∞Ìôî
      setEditText(''); //textÏ¥àÍ∏∞Ìôî
    }
  };
  const handdleDeleteComment = (index) => {
    const updatedComments = comments.filter((_, i) => i !== index);
    setComments(updatedComments);
  };

  return (
    <div className="commentWrap">
      <button className="commentToggleBtn" onClick={ToggleComments}>
        {showComment ? "ÎåìÍ∏Ä Ïà®Í∏∞Í∏∞" : "ÎåìÍ∏Ä Î≥¥Í∏∞"}
      </button>
      {showComment && (
        <div>
          <ul className="commentList">
            {comments.map((comment, index)=>(
                            <li key={comment.id}>
                            <div className="commentContent">
                              {editIndex === index ? 
                              (
                                <div>
                                  <input //ÏàòÏ†ïÏ§ëÏù∏ ÎåìÍ∏Ä ÏûÖÎ†• ÌïÑÎìúÎ°ú
                                    type="text" 
                                    value={editText}
                                    onChange={(e)=>setEditText(e.target.value)} //ÏàòÏ†ïÎêú ÌÖçÏä§Ìä∏ ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏
                                    placeholder="ÎåìÍ∏ÄÏùÑ ÏûÖÎ†•ÌïòÏÑ∏Ïöî.
                                  "/>
                                  <button className="commentAddBtn" onClick={handdleSaveEdit}>Ï†ÄÏû•</button>
                                </div>
                              ) : 
                              (
                                <p>{comment.text}</p>
                              )}
                            </div>
                            <div>
                              <button onClick={() => setLike(like+1)}>üëç</button>
                              <span>0</span>
                            </div>
                            <div>
                              <span 
                                className="editBtn"
                                onClick={()=>handdleEditComments(index)}
                              >
                                ÏàòÏ†ï
                              </span>
                              <span 
                                className="deleteBtn"
                                onClick={()=>handdleDeleteComment(index)}
                              >
                                ÏÇ≠Ï†ú
                              </span>
                            </div>
                          </li>
            ))
          }
          </ul>
          <div>
            <div className="reple">
              <input 
                type="text"
                value={newComment}
                onChange={(e)=>setNewComment(e.target.value)}
                placeholder="ÎåìÍ∏ÄÏùÑ ÏûÖÎ†•ÌïòÏÑ∏Ïöî."
              />
              <button className="commentAddBtn" onClick={handdleAddComments}>ÎåìÍ∏Ä Ï∂îÍ∞Ä</button>
            </div>
          </div>
      </div>
      )}
    </div>
  )
}

export default CommentSection